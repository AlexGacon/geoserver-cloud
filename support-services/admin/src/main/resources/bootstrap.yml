info:
  instance-id: ${spring.application.name}:${spring.application.instance_id:${spring.cloud.client.ip-address}}:${server.port}

server:
  port: 8080
  # Let spring-boot's ForwardedHeaderFilter take care of reflecting the client-originated protocol and address in the HttpServletRequest  
  forward-headers-strategy: framework
  servlet.context-path: /

spring:
  main:
    banner-mode: off
    allow-bean-definition-overriding: true
  application:
    name: admin-service
  cloud:
    config:
      fail-fast: true
      retry:
        max-attempts: 20
      discovery:
        enabled: true
        service-id: config-service
#  autoconfigure:
#    exclude:
#      - org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration
#      - org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration
#      - org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
#      - org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration
#      - org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration
#      - org.springframework.boot.actuate.autoconfigure.security.servlet.ManagementWebSecurityAutoConfiguration
eureka:
  instance:
    hostname: ${spring.application.name}
    instance-id: ${info.instance-id}
    preferIpAddress: true
    lease-expiration-duration-in-seconds: 30
    lease-renewal-interval-in-seconds: 30
  client:
    enabled: true
    registerWithEureka: true
    fetchRegistry: true
    registry-fetch-interval-seconds: 30
    serviceUrl:
      defaultZone: ${eureka.server.url:http://discovery:8761/eureka}
    healthcheck:
      enabled: true

logging.level:
    '[org.springframework.retry]': debug
---
spring.config.activate.on-profile: local
server.port: 9091
eureka.server.url: http://localhost:8761/eureka
    