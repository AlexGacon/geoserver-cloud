info:
  component: Config Server
  instance-id: ${spring.application.name}:${vcap.application.instance_id:${spring.application.instance_id:${spring.cloud.client.ip-address}}:${server.port}}

server:
  port: 8080
  tomcat:
    max-connections: 1024    
    threads:
      min-spare: 1
      max: 25

spring:
  main.banner-mode: off
  application.name: config-service
  profiles:
    include:
    - ${config.profile:native} #unconditionally use a config server backend profile, defaulting to native 
  jmx.enabled: false
  cloud:
    config:
      discovery:
        enabled: false # this is the config server, no need to look up its location through discovery service
        service-id: ${spring.application.name}
      server: # see https://cloud.spring.io/spring-cloud-config/reference/html/#_spring_cloud_config_server
        enabled: true
        bootstrap: true
        default-application-name: application
#        accept-empty: false #send 404 if global application.yml is not found
        git:
          uri: ${config.git.uri} 
          #repos:
          #  - patterns: multi-repo-demo-*
          #    uri: https://github.com/spring-cloud-samples/config-repo
          skip-ssl-validation: true
          timeout: 10
          # Default value of 0 makes the git backend fetch updated configuration from the Git repo every time it is requested
          refresh-rate: 30
          # where to store the cloned repository, if unset, it'll use /tmp/config-repo-<randomid>
          basedir: ${config.git.basedir:./git_config} # where to store the cloned repository, if unset, it'll use /tmp/config-repo-<randomid>
        native:
          fail-on-error: true
          search-locations:
          - ${config.native.path:file:./config}

eureka:
  instance:
    appname: ${spring.application.name}
    instance-id: ${info.instance-id}
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 30
  client:
    enabled: true
    register-with-eureka: true
    fetch-registry: true
    registry-fetch-interval-seconds: 30
    service-url:
      defaultZone: ${eureka.server.url:http://discovery:8761/eureka} 
    healthcheck:
      enabled: true

management:
  endpoints:
    enabled-by-default: true
    web.exposure.include: "*"
  endpoint:
    info.enabled: true
    metrics.enabled: true
    shutdown.enabled: true
    health:
      enabled: true
      show-details: always
  metrics:
    enable:
      all: true
    export:
      atlas.enabled: false

logging:
  level:
    root: info
    '[org.springframework.cloud]': info
    '[org.springframework.cloud.config]': info
    # Avoid log flooding with "INFO Adding property source: file:<...>/application.yml" triggered by the actuator health check
    '[org.springframework.cloud.config.server.environment.NativeEnvironmentRepository]': error

---
spring.config.activate.on-profile: local
##server.port: 8888
eureka.server.url: http://localhost:8761/eureka
config.native.path: /data2/groldan/git/geoserver-microservices/config
