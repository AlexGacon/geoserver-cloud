apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "geoserver.fullname" . }}-config-configs
  annotations:
  labels:
    {{- include "geoserver.labels" . | nindent 4 }}
    gs-service: "config"
data:
  gateway-service.yml: |
    server:
      compression:
        enabled: true
    # Configure routes to services. See https://cloud.spring.io/spring-cloud-gateway/single/spring-cloud-gateway.html
    management:
      endpoint:
        gateway:
          enabled: true # default value
        info:
          enabled: true
        health:
          enabled: true
      endpoints:
        web:
          exposure:
            include: gateway, info, health
    spring:
      cloud:
        gateway:
          actuator:
            verbose:
              enabled: true
          globalcors:
            cors-configurations:
              '[/**]':
                allowedOrigins: "*"
                allowedHeaders: "Content-Type, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Authorization, X-Requested-With, requestId, Correlation-Id"
                allowedMethods:
                  - GET
          routes:
    # WFS routes
          - id: wfs # proxies requests to gateway-service:/wfs to wfs-service:/wfs
            uri: lb://wfs-service #load balanced to the wfs-service instances
            predicates:
            - Path=/wfs,/{segment}/wfs,/schemas/wfs/**
    # proxy [/{workspace}]/ows?SERVICE=wfs to wfs-service:[/{workspace}]/ows?SERVICE=wfs. Param value is case insensitive, name is not.
          - id: wfs_ows
            uri: lb://wfs-service
            predicates:
            - Path=/ows,/{segment}/ows
            - RegExpQuery=(?i:service),(?i:wfs) # match service=wfs case insensitively 
    # WMS routes
          - id: wms # proxies requests to gateway-service:/wms to wms-service:/wms
            uri: lb://wms-service #load balanced to the wms-service instances
            predicates:
            - Path=/wms,/{segment}/wms,/schemas/wms/**,/openlayers/**,/openlayers3/**
          - id: wms_ows # proxy [/{workspace}]/ows?SERVICE=wms to wms-service:[/{workspace}]/ows?SERVICE=wms. Param value is case insensitive, name is not.
            uri: lb://wms-service
            predicates:
            - Path=/ows,/{segment}/ows
            - RegExpQuery=(?i:service),(?i:wms) # match service=wms case insensitively 
    # WCS routes
          - id: wcs # proxies requests to gateway-service:/wcs to wcs-service:/wcs
            uri: lb://wcs-service #load balanced to the wps-service instances
            predicates:
            - Path=/wcs,/{segment}/wcs,/schemas/wcs/**
          - id: wcs_ows # proxy [/{workspace}]/ows?SERVICE=wcs to wcs-service:[/{workspace}]/ows?SERVICE=wcs. Param value is case insensitive, name is not.
            uri: lb://wcs-service
            predicates:
            - Path=/ows,/{segment}/ows
            - RegExpQuery=(?i:service),(?i:wcs) # match service=wcs case insensitively 
    # WPS routes
          - id: wps # proxies requests to gateway-service:/wps to wfs-service:/wps
            uri: lb://wps-service #load balanced to the wps-service instances
            predicates:
            - Path=/wps,/{segment}/wps,/schemas/wps/**
          - id: wps_ows # proxy [/{workspace}]/ows?SERVICE=wps to wps-service:[/{workspace}]/ows?SERVICE=wps. Param value is case insensitive, name is not.
            uri: lb://wps-service
            predicates:
            - Path=/ows,/{segment}/ows
            - RegExpQuery=(?i:service),(?i:wps) # match service=wps case insensitively 
    # REST configuration routes
          - id: restconfig
            uri: lb://restconfig-v1 #load balanced to the restconfig-v1 instances
            predicates:
            - Path=/rest/**
    # Web UI configuration routes
          - id: restconfig
            uri: lb://web-ui
            predicates:
            - Path=/,/index.html,/web,/web/**,/j_spring_security_check,/j_spring_security_logout

    logging:
      level:
        #root: ERROR
        org.geoserver.cloud.autoconfigure: DEBUG
        com.netflix.discovery: WARN
        com.netflix.eureka: WARN

  web-ui.yml: |
    geoserver:
      security.enabled: true
      servlet.filter.session-debug.enabled: false # until the NPE is fixed
      catalog:
        advertised: true
        localWorkspace: true
        secure: true
      backend:
        data-directory:
          enabled: false
          location: ${GEOSERVER_DATA_DIR:${java.io.tmpdir}/default_data_directory} 
        jdbcconfig:
          enabled: true
          initdb: false
          web.enabled: false
          cache-directory: ${jdbcconfig.cachedir:${java.io.tmpdir}/geoserver-jdbcconfig-cache}
          datasource:
            url: {{ .Values.jdbcconfig.url }}
            username: {{ .Values.jdbcconfig.username }}
            password: {{ .Values.jdbcconfig.password }}
            driverClassname: org.postgresql.Driver
            # optional:
            schema: public
            minimumIdle: 2
            maximumPoolSize: 8

    spring:
      rabbitmq:
        host: ${RABBITMQ_HOST:localhost}
        port: ${RABBITMQ_PORT:5672}
        username: ${RABBITMQ_URSER:guest}
        password: ${RABBITMQ_PASSWORD:guest}
      cloud:
        bus:
          enabled: true
          id: ${server.instance-id} # use the same instance id for eureka (see service's' bootstrap.yml) and cloud-bus' rabbitmq instance id
          trace.enabled: true #switch on tracing of acks (default off).
        stream:
          bindings:
            springCloudBusOutput:
              destination: gscatalog
            springCloudBusInput:
              destination: gscatalog

    logging:
      level:
        root: WARN
        org.springframework: ERROR
        org.springframework.cloud.bus: INFO
        org.geoserver.platform: ERROR
        org.geoserver.cloud: INFO
        org.geoserver.cloud.catalog.bus: DEBUG
        org.geoserver.cloud.autoconfigure: DEBUG
        org.geoserver.jdbcconfig: INFO
        org.geoserver.jdbcconfig.internal: INFO
        oshi.hardware.platform.linux: OFF

  restconfig-v1.yml: |
    geoserver:
      security.enabled: true
      servlet.filter.session-debug.enabled: false # until the NPE is fixed
      catalog:
        advertised: true
        localWorkspace: true
        secure: true
      backend:
        data-directory:
          enabled: false
          location: ${GEOSERVER_DATA_DIR:${java.io.tmpdir}/default_data_directory} 
        jdbcconfig:
          enabled: true
          initdb: false
          web.enabled: false
          cache-directory: ${jdbcconfig.cachedir:${java.io.tmpdir}/geoserver-jdbcconfig-cache}
          datasource:
            jdbcUrl: {{ .Values.jdbcconfig.url }}
            username: {{ .Values.jdbcconfig.username }}
            password: {{ .Values.jdbcconfig.password }}
            driverClassname: org.postgresql.Driver
            # optional:
            schema: public
            minimumIdle: 2
            maximumPoolSize: 8

    spring:
      rabbitmq:
        host: ${RABBITMQ_HOST:localhost}
        port: ${RABBITMQ_PORT:5672}
        username: ${RABBITMQ_URSER:guest}
        password: ${RABBITMQ_PASSWORD:guest}
      cloud:
        bus:
          enabled: true
          id: ${server.instance-id} # use the same instance id for eureka (see service's' bootstrap.yml) and cloud-bus' rabbitmq instance id
          trace.enabled: true #switch on tracing of acks (default off).
        stream:
          bindings:
            springCloudBusOutput:
              destination: gscatalog
            springCloudBusInput:
              destination: gscatalog
     
    logging:
      level:
        root: WARN
        org.springframework: ERROR
        org.springframework.cloud.bus: INFO
        org.geoserver.platform: ERROR
        org.geoserver.cloud: INFO
        org.geoserver.cloud.catalog.bus: DEBUG
        org.geoserver.cloud.autoconfigure: INFO
        org.geoserver.jdbcconfig: INFO
        org.geoserver.jdbcconfig.internal: INFO
        oshi.hardware.platform.linux: OFF

  wfs-service.yml: |
    geoserver:
      security.enabled: true
      servlet.filter.session-debug.enabled: false # until the NPE is fixed
      catalog:
        advertised: true
        localWorkspace: true
        secure: true
      backend:
        data-directory:
          enabled: false
          location: ${GEOSERVER_DATA_DIR:${java.io.tmpdir}/default_data_directory} 
        jdbcconfig:
          enabled: true
          initdb: false
          web.enabled: false
          cache-directory: ${jdbcconfig.cachedir:${java.io.tmpdir}/geoserver-jdbcconfig-cache}
          datasource:
            jdbcUrl: {{ .Values.jdbcconfig.url }}
            username: {{ .Values.jdbcconfig.username }}
            password: {{ .Values.jdbcconfig.password }}
            driverClassname: org.postgresql.Driver
            # optional:
            schema: public
            minimumIdle: 2
            maximumPoolSize: 8

    spring:
      rabbitmq:
        host: ${RABBITMQ_HOST:localhost}
        port: ${RABBITMQ_PORT:5672}
        username: ${RABBITMQ_URSER:guest}
        password: ${RABBITMQ_PASSWORD:guest}
      cloud:
        bus:
          enabled: true
          id: ${server.instance-id} # use the same instance id for eureka (see service's' bootstrap.yml) and cloud-bus' rabbitmq instance id
          trace.enabled: true #switch on tracing of acks (default off).
        stream:
          bindings:
            springCloudBusOutput:
              destination: gscatalog
            springCloudBusInput:
              destination: gscatalog

    logging:
      level:
        root: WARN
        org.springframework: ERROR
        org.springframework.cloud.bus: INFO
        org.geoserver.platform: ERROR
        org.geoserver.cloud: INFO
        org.geoserver.cloud.catalog.bus: DEBUG
        org.geoserver.cloud.autoconfigure: INFO
        org.geoserver.jdbcconfig: INFO
        org.geoserver.jdbcconfig.internal: INFO
        oshi.hardware.platform.linux: OFF

  wms-service.yml: |
    geoserver:
      security.enabled: true
      servlet.filter.session-debug.enabled: false # until the NPE is fixed
      catalog:
        advertised: true
        localWorkspace: true
        secure: true
      backend:
        data-directory:
          enabled: false
          location: ${GEOSERVER_DATA_DIR:${java.io.tmpdir}/default_data_directory} 
        jdbcconfig:
          enabled: true
          initdb: false
          web.enabled: false
          cache-directory: ${jdbcconfig.cachedir:${java.io.tmpdir}/geoserver-jdbcconfig-cache}
          datasource:
            jdbcUrl: ${jdbcconfig.url:"jdbc:postgresql://database:5432/geoserver_config"}
            username: ${jdbcconfig.username:geoserver}
            password: ${jdbcconfig.password:geo$erver}
            driverClassname: ${jdbcconfig.driverClassname:org.postgresql.Driver}
            # optional:
            schema: public
            minimumIdle: 2
            maximumPoolSize: 8

    spring:
      rabbitmq:
        host: ${RABBITMQ_HOST:localhost}
        port: ${RABBITMQ_PORT:5672}
        username: ${RABBITMQ_URSER:guest}
        password: ${RABBITMQ_PASSWORD:guest}
      cloud:
        bus:
          enabled: true
          id: ${server.instance-id} # use the same instance id for eureka (see service's' bootstrap.yml) and cloud-bus' rabbitmq instance id
          trace.enabled: true #switch on tracing of acks (default off).
        stream:
          bindings:
            springCloudBusOutput:
              destination: gscatalog
            springCloudBusInput:
              destination: gscatalog

    logging:
      level:
        root: WARN
        org.springframework: ERROR
        org.springframework.cloud.bus: INFO
        org.geoserver.platform: ERROR
        org.geoserver.cloud: INFO
        org.geoserver.cloud.catalog.bus: INFO
        org.geoserver.cloud.autoconfigure: INFO
        org.geoserver.cloud.config.factory: INFO
        org.geoserver.jdbcconfig: INFO
        org.geoserver.jdbcconfig.internal: INFO
        oshi.hardware.platform.linux: ERROR
        oshi.software.os: ERROR

  wcs-service.yml: |
    geoserver:
      security.enabled: true
      servlet.filter.session-debug.enabled: false # until the NPE is fixed
      catalog:
        advertised: true
        localWorkspace: true
        secure: true
      backend:
        data-directory:
          enabled: false
          location: ${GEOSERVER_DATA_DIR:${java.io.tmpdir}/default_data_directory} 
        jdbcconfig:
          enabled: true
          initdb: false
          web.enabled: false
          cache-directory: ${jdbcconfig.cachedir:${java.io.tmpdir}/geoserver-jdbcconfig-cache}
          datasource:
            jdbcUrl: ${jdbcconfig.url:"jdbc:postgresql://database:5432/geoserver_config"}
            username: ${jdbcconfig.username:geoserver}
            password: ${jdbcconfig.password:geo$erver}
            driverClassname: ${jdbcconfig.driverClassname:org.postgresql.Driver}
            # optional:
            schema: public
            minimumIdle: 2
            maximumPoolSize: 8

    spring:
      rabbitmq:
        host: ${RABBITMQ_HOST:localhost}
        port: ${RABBITMQ_PORT:5672}
        username: ${RABBITMQ_URSER:guest}
        password: ${RABBITMQ_PASSWORD:guest}
      cloud:
        bus:
          enabled: true
          id: ${server.instance-id} # use the same instance id for eureka (see service's' bootstrap.yml) and cloud-bus' rabbitmq instance id
          trace.enabled: true #switch on tracing of acks (default off).
        stream:
          bindings:
            springCloudBusOutput:
              destination: gscatalog
            springCloudBusInput:
              destination: gscatalog

    logging:
      level:
        root: WARN
        org.springframework: ERROR
        org.springframework.cloud.bus: INFO
        org.geoserver.platform: ERROR
        org.geoserver.cloud: INFO
        org.geoserver.cloud.catalog.bus: INFO
        org.geoserver.cloud.autoconfigure: INFO
        org.geoserver.cloud.config.factory: INFO
        org.geoserver.jdbcconfig: INFO
        org.geoserver.jdbcconfig.internal: INFO
        oshi.hardware.platform.linux: ERROR
        oshi.software.os: ERROR
