version: "3"

#volumes:

networks:
  gs-cloud-network:
    driver: bridge
        
services:
  # Eureka service discovery. This is a Discovery First Bootstrap configuration.
  # Since the discovery service are fixed entry points, we're setting up two peer aware eureka instances for HA.
  # Browse to http://localhost:8761 and http://localhost:8762 to verify they see each
  # other and all services are registered at both eureka instances.
  # See http://cloud.spring.io/spring-cloud-static/spring-cloud.html#_peer_awareness
  discovery1:
    image: org.geoserver.cloud/gs-cloud-discovery-service:${TAG}
    environment:
      PORT: 8761
      EUREKA_INSTANCE_HOSTNAME: discovery1
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery2:8762/eureka
      JAVA_OPTS: -Xmx256m
    expose: 
      - 8761
    ports:
      - "8761:8761"
    networks:
      - gs-cloud-network

  discovery2:
    image: org.geoserver.cloud/gs-cloud-discovery-service:${TAG}
    environment:
      PORT: 8762
      EUREKA_INSTANCE_HOSTNAME: discovery2
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery1:8761/eureka
      JAVA_OPTS: -Xmx256m
    expose: 
      - 8762
    ports:
      - "8762:8762"
    networks:
      - gs-cloud-network


  # Spring Cloud Config service, provides centralized configuration to all
  # microservices. Being a Discovery First Bootstrap configuration, it'll
  # register itself with the Eureka discovery service and can be scaled
  config-service:
    image: org.geoserver.cloud/gs-cloud-config-service:${TAG}
    depends_on:
      - discovery1
    environment:
      EUREKA_SERVER_URL: ${EUREKA_SERVER_URL}
      JAVA_OPTS: -Xmx256m
    networks:
      - gs-cloud-network

  # Application facade, provides a single entry point routing to all
  # microservices (e.g. http://localhost:9090/geoserver/wms, http://localhost:9090/geoserver/wfs, etc)
  gateway-service:
    image: org.geoserver.cloud/gs-cloud-gateway:${TAG}
    depends_on:
      - discovery1
      - config-service
    environment:
      PORT: 9090
      EUREKA_SERVER_URL: ${EUREKA_SERVER_URL}
      JAVA_OPTS: -Xmx256m
    expose: 
      - 9090
    ports:
      - "9090:9090"
    networks:
      - gs-cloud-network


  # WFS microservice, port dynamically allocated to allow scaling (e.g docker-compose scale wfs=5)
  wfs:
    image: org.geoserver.cloud/gs-cloud-wfs:${TAG}
    depends_on:
      - gateway-service
    environment:
      EUREKA_SERVER_URL: ${EUREKA_SERVER_URL}
      JAVA_OPTS: -Xmx512m
    networks:
      - gs-cloud-network

  # WMS microservice, port dynamically allocated to allow scaling (e.g docker-compose scale wms=5)
  wms:
    image: org.geoserver.cloud/gs-cloud-wms:${TAG}
    depends_on:
      - gateway-service
    environment:
      EUREKA_SERVER_URL: ${EUREKA_SERVER_URL}
      JAVA_OPTS: -Xmx512m
    networks:
      - gs-cloud-network

  # WCS microservice, port dynamically allocated to allow scaling (e.g docker-compose scale wcs=5)
  wcs:
    image: org.geoserver.cloud/gs-cloud-wcs:${TAG}
    depends_on:
      - gateway-service
    environment:
      EUREKA_SERVER_URL: ${EUREKA_SERVER_URL}
      JAVA_OPTS: -Xmx512m
    networks:
      - gs-cloud-network

  # WPS microservice, port dynamically allocated to allow scaling (e.g docker-compose scale wps=5)
  wps:
    image: org.geoserver.cloud/gs-cloud-wps:${TAG}
    depends_on:
      - gateway-service
    environment:
      EUREKA_SERVER_URL: ${EUREKA_SERVER_URL}
      JAVA_OPTS: -Xmx512m
    networks:
      - gs-cloud-network
