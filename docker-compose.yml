version: "3.8"
#
#volumes:

networks:
  gs-cloud-network:
    driver: bridge
        
services:
  # Eureka service discovery. This is a Discovery First Bootstrap configuration.
  # The discovery service is the only fixed entry point.
  # Browse to http://localhost:8761 to check all services are registered.
  # Run docker-compose -f docker-compose.yml -f docker-compose-discovery-ha.yml to run extra discovery service instances for HA
  discovery:
    image: org.geoserver.cloud/gs-cloud-discovery-service:${TAG}
    container_name: discovery-1
    environment:
      PORT: 8761
      EUREKA_INSTANCE_HOSTNAME: discovery
      JAVA_OPTS: -Xmx256m
    expose: 
      - 8761
    ports:
      - "8761:8761"
    networks:
      - gs-cloud-network

  # Spring Cloud Config service, provides centralized configuration to all
  # microservices. Being a Discovery First Bootstrap configuration, it'll
  # register itself with the Eureka discovery service and can be scaled
  config-service:
    image: org.geoserver.cloud/gs-cloud-config-service:${TAG}
    depends_on:
      - discovery
    environment:
      EUREKA_SERVER_URL: ${EUREKA_SERVER_URL}
      JAVA_OPTS: -Xmx256m
    networks:
      - gs-cloud-network

  # Application facade, provides a single entry point routing to all
  # microservices (e.g. http://localhost:9090/geoserver/wms, http://localhost:9090/geoserver/wfs, etc)
  gateway-service:
    image: org.geoserver.cloud/gs-cloud-gateway:${TAG}
    container_name: gateway
    depends_on:
      - config-service
    environment:
      PORT: 9090
      EUREKA_SERVER_URL: ${EUREKA_SERVER_URL}
      JAVA_OPTS: -Xmx256m
    expose: 
      - 9090
    ports:
      - "9090:9090"
    networks:
      - gs-cloud-network


  # WFS microservice, port dynamically allocated to allow scaling (e.g docker-compose scale wfs=5)
  wfs:
    image: org.geoserver.cloud/gs-cloud-wfs:${TAG}
    depends_on:
      - config-service
    environment:
      EUREKA_SERVER_URL: ${EUREKA_SERVER_URL}
      JAVA_OPTS: -Xmx512m
    networks:
      - gs-cloud-network

  # WMS microservice, port dynamically allocated to allow scaling (e.g docker-compose scale wms=5)
  wms:
    image: org.geoserver.cloud/gs-cloud-wms:${TAG}
    depends_on:
      - config-service
    environment:
      EUREKA_SERVER_URL: ${EUREKA_SERVER_URL}
      JAVA_OPTS: -Xmx512m
    networks:
      - gs-cloud-network

  # WCS microservice, port dynamically allocated to allow scaling (e.g docker-compose scale wcs=5)
  wcs:
    image: org.geoserver.cloud/gs-cloud-wcs:${TAG}
    depends_on:
      - config-service
    environment:
      EUREKA_SERVER_URL: ${EUREKA_SERVER_URL}
      JAVA_OPTS: -Xmx512m
    networks:
      - gs-cloud-network

  # WPS microservice, port dynamically allocated to allow scaling (e.g docker-compose scale wps=5)
  wps:
    image: org.geoserver.cloud/gs-cloud-wps:${TAG}
    depends_on:
      - config-service
    environment:
      EUREKA_SERVER_URL: ${EUREKA_SERVER_URL}
      JAVA_OPTS: -Xmx512m
    networks:
      - gs-cloud-network

  # WPS microservice, port dynamically allocated to allow scaling (e.g docker-compose scale wps=5)
  rest:
    image: org.geoserver.cloud/gs-cloud-restconfig-v1:${TAG}
    depends_on:
      - config-service
    environment:
      EUREKA_SERVER_URL: ${EUREKA_SERVER_URL}
      JAVA_OPTS: -Xmx256m
    networks:
      - gs-cloud-network
