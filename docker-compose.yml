version: "3.8"

volumes:
  postgresql_config_data:
  
networks:
  gs-cloud-network:
    driver: bridge
        
services:
  # Eureka service discovery. This is a Discovery First Bootstrap configuration.
  # The discovery service is the only fixed entry point.
  # Browse to http://localhost:8761 to check all services are registered.
  # Run docker-compose -f docker-compose.yml -f docker-compose-discovery-ha.yml to run extra discovery service instances for HA
  discovery:
    image: org.geoserver.cloud/gs-cloud-discovery-service:${TAG}
    environment:
      PORT: ${DISCOVERY_PORT}
      EUREKA_INSTANCE_HOSTNAME: discovery
      JAVA_OPTS: ${DISCOVERY_JAVA_OPTS}
    expose: 
      - ${DISCOVERY_PORT} #8761
    ports:
      - "${DISCOVERY_PORT}:${DISCOVERY_PORT}" # for development, so services can be run from localhost and find the discovery service running on docker
    networks:
      - gs-cloud-network
    healthcheck:
      test: ["CMD", "curl", "-f", "-m", "1", "http://localhost:${DISCOVERY_PORT}/actuator/health"]
      interval: 1s
      timeout: 1s
      retries: 15

  # Spring Cloud Config service, provides centralized configuration to all
  # microservices. Being a Discovery First Bootstrap configuration, it'll
  # register itself with the Eureka discovery service and can be scaled
  config:
    image: org.geoserver.cloud/gs-cloud-config-service:${TAG}
    depends_on:
      - discovery
    environment:
      PORT: ${CONFIG_PORT}
      EUREKA_SERVER_URL: ${EUREKA_SERVER_URL}
      JAVA_OPTS: ${CONFIG_JAVA_OPTS}
    expose:
      - ${CONFIG_PORT}
    networks:
      - gs-cloud-network
    healthcheck:
      test: ["CMD", "curl", "-f", "-m", "1", "http://localhost:${CONFIG_PORT}/actuator/health"]
      interval: 1s
      timeout: 1s
      retries: 15
    # wait until discovery service is available
    command: dockerize -wait http://discovery:${DISCOVERY_PORT}/actuator/health --timeout 15s java ${CONFIG_JAVA_OPTS} -jar /opt/app/config-service.jar

  # Application facade, provides a single entry point routing to all
  # microservices (e.g. http://localhost:9090/geoserver/wms, http://localhost:9090/geoserver/wfs, etc)
  gateway:
    image: org.geoserver.cloud/gs-cloud-gateway:${TAG}
    depends_on:
      - discovery
      - config
    environment:
      PORT: ${GATEWAY_PORT}
      EUREKA_SERVER_URL: ${EUREKA_SERVER_URL}
      JAVA_OPTS: ${GATEWAY_JAVA_OPTS}
    expose: 
      - ${GATEWAY_PORT}
    ports:
      - "${GATEWAY_PORT}:${GATEWAY_PORT}"
    networks:
      - gs-cloud-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/actuator/health"]
    # wait until config service is available
    command: dockerize -wait http://discovery:${DISCOVERY_PORT}/actuator/health --timeout 15s java ${GATEWAY_JAVA_OPTS} -jar /opt/app/gateway-service.jar

  database:
    image: org.geoserver.cloud/gs-cloud-database:${TAG}
    environment:
      POSTGRES_DB: "geoserver_config"
      POSTGRES_USER: "geoserver"
      POSTGRES_PASSWORD: "geo$$erver"
    ports:
      - 5432:5432
    networks:
      - gs-cloud-network
    volumes:
      - postgresql_config_data:/var/lib/postgresql/data

  # WFS microservice, port dynamically allocated to allow scaling (e.g docker-compose scale wfs=5)
  wfs:
    image: org.geoserver.cloud/gs-cloud-wfs:${TAG}
    depends_on:
      - discovery
      - config
      - database
    environment:
      PORT: ${WFS_PORT}
      EUREKA_SERVER_URL: ${EUREKA_SERVER_URL}
      JAVA_OPTS: ${WFS_JAVA_OPTS}
    networks:
      - gs-cloud-network
    #tmpfs: #TODO: avoid runs creating volumes at all
    #  - /tmp
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${WFS_PORT}/actuator/health"]
    command: dockerize -wait http://discovery:${DISCOVERY_PORT}/actuator/health --timeout 15s java ${WFS_JAVA_OPTS} -jar /opt/app/wfs-service.jar

  # WMS microservice, port dynamically allocated to allow scaling (e.g docker-compose scale wms=5)
  wms:
    image: org.geoserver.cloud/gs-cloud-wms:${TAG}
    depends_on:
      - discovery
      - config
    environment:
      PORT: ${WMS_PORT}
      EUREKA_SERVER_URL: ${EUREKA_SERVER_URL}
      JAVA_OPTS: ${WMS_JAVA_OPTS}
    networks:
      - gs-cloud-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${WMS_PORT}/actuator/health"]
    # wait until config service is available
    command: dockerize -wait http://config:${CONFIG_PORT}/wms-service/deafult --timeout 15s java ${WMS_JAVA_OPTS} -jar /opt/app/wms-service.jar

  # WCS microservice, port dynamically allocated to allow scaling (e.g docker-compose scale wcs=5)
  wcs:
    image: org.geoserver.cloud/gs-cloud-wcs:${TAG}
    depends_on:
      - discovery
      - config
    environment:
      PORT: ${WCS_PORT}
      EUREKA_SERVER_URL: ${EUREKA_SERVER_URL}
      JAVA_OPTS: ${WCS_JAVA_OPTS}
    networks:
      - gs-cloud-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${WCS_PORT}/actuator/health"]
    # wait until config service is available
    command: dockerize -wait http://config:${CONFIG_PORT}/wcs-service/deafult --timeout 15s java ${WCS_JAVA_OPTS} -jar /opt/app/wcs-service.jar

  # WPS microservice, port dynamically allocated to allow scaling (e.g docker-compose scale wps=5)
  wps:
    image: org.geoserver.cloud/gs-cloud-wps:${TAG}
    depends_on:
      - discovery
      - config
    environment:
      PORT: ${WPS_PORT}
      EUREKA_SERVER_URL: ${EUREKA_SERVER_URL}
      JAVA_OPTS: ${WPS_JAVA_OPTS}
    networks:
      - gs-cloud-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${WPS_PORT}/actuator/health"]
    # wait until config service is available
    command: dockerize -wait http://config:${CONFIG_PORT}/wps-service/deafult --timeout 15s java ${WPS_JAVA_OPTS} -jar /opt/app/wps-service.jar

  # WPS microservice, port dynamically allocated to allow scaling (e.g docker-compose scale wps=5)
  rest:
    image: org.geoserver.cloud/gs-cloud-restconfig-v1:${TAG}
    depends_on:
      - discovery
      - config
    environment:
      PORT: ${REST_PORT}
      EUREKA_SERVER_URL: ${EUREKA_SERVER_URL}
      JAVA_OPTS: ${REST_JAVA_OPTS}
    networks:
      - gs-cloud-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${REST_PORT}/actuator/health"]
    # wait until config service is available
    command: dockerize -wait http://config:${CONFIG_PORT}/restconfig-service/deafult --timeout 15s java ${REST_JAVA_OPTS} -jar /opt/app/restconfig-service.jar
